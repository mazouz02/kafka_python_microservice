version: '3.8'

services:
  mongo:
    image: mongo:5.0
    container_name: case_management_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - case_management_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: case_management_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - case_management_network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: case_management_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --list --bootstrap-server kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - case_management_network

  case-management-api:
    build:
      context: .
      dockerfile: case_management_service/Dockerfile
    container_name: case_management_api_service
    command: ["/usr/src/app/startup.sh", "api"]
    ports:
      - "8000:8000"
    depends_on:
      - mongo
      - kafka
    networks:
      - case_management_network
    environment:
      - MONGO_DETAILS=mongodb://mongo:27017
      - DB_NAME=case_management_db_docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC_NAME=kyc_events_docker
      - KAFKA_CONSUMER_GROUP_ID=case_management_group_docker
      - LOG_LEVEL=INFO
      - SERVICE_NAME_API=case-api-docker
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT= http://otel-collector:4317
      - CONFIG_SERVICE_URL=http://config-service:8080/api/v1/notification-rules
      - NOTIFICATION_KAFKA_TOPIC=notification_events_docker
    volumes:
      - ./case_management_service:/usr/src/app/case_management_service

  case-management-consumer:
    build:
      context: .
      dockerfile: case_management_service/Dockerfile
    container_name: case_management_consumer_service
    command: ["/usr/src/app/startup.sh", "consumer"]
    depends_on:
      - mongo
      - kafka
    networks:
      - case_management_network
    environment:
      - MONGO_DETAILS=mongodb://mongo:27017
      - DB_NAME=case_management_db_docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC_NAME=kyc_events_docker
      - KAFKA_CONSUMER_GROUP_ID=case_management_group_docker
      - LOG_LEVEL=INFO
      - SERVICE_NAME_CONSUMER=case-consumer-docker
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317
      - CONFIG_SERVICE_URL=http://config-service:8080/api/v1/notification-rules
      - NOTIFICATION_KAFKA_TOPIC=notification_events_docker
    volumes:
      - ./case_management_service:/usr/src/app/case_management_service

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel_collector
    volumes:
    - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
    - "4317:4317"     # OTLP gRPC
    - "4318:4318"     # OTLP HTTP (if you want it)
    networks:
    - case_management_network

volumes:
  mongo_data:

networks:
  case_management_network:
    driver: bridge
