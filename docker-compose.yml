version: '3.8'

services:
  mongo:
    image: mongo:5.0 # Using MongoDB 5.0
    container_name: case_management_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db # Persist MongoDB data
    networks:
      - case_management_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2 # Using Confluent Platform Zookeeper
    container_name: case_management_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - case_management_network

  kafka:
    image: confluentinc/cp-kafka:7.3.2 # Using Confluent Platform Kafka
    container_name: case_management_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" # For clients within Docker network (e.g., our service)
      - "29092:29092" # For clients outside Docker network (e.g., local machine UI)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # For Confluent images
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # For Confluent images
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - case_management_network

  # Case Management API Service
  case-management-api:
    build:
      context: . # Root of the project where Dockerfile and case_management_service dir exist
      dockerfile: case_management_service/Dockerfile
    container_name: case_management_api_service
    command: ["/usr/src/app/startup.sh", "api"]
    ports:
      - "8000:8000"
    depends_on:
      - mongo
      - kafka
    networks:
      - case_management_network
    environment:
      # These will be picked up by app.config.settings
      - MONGO_DETAILS=mongodb://mongo:27017
      - DB_NAME=case_management_db_docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_NAME=kyc_events_docker
      - KAFKA_CONSUMER_GROUP_ID=case_management_group_docker
      - LOG_LEVEL=INFO
      - SERVICE_NAME_API=case-api-docker
      # - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317 # Example if OTel collector is added
      # - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317 # Example
    volumes:
      # Mount the service code for live reload if --reload is used with Uvicorn
      # Ensure the path is correct relative to docker-compose.yml location
      - ./case_management_service:/usr/src/app/case_management_service
    # healthcheck: # Optional basic healthcheck
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Case Management Kafka Consumer Service
  case-management-consumer:
    build:
      context: .
      dockerfile: case_management_service/Dockerfile # Uses the same image as API
    container_name: case_management_consumer_service
    command: ["/usr/src/app/startup.sh", "consumer"] # Different command
    depends_on:
      - mongo
      - kafka
      # case-management-api # Optional: wait for API to be healthy if consumer depends on it (not typical)
    networks:
      - case_management_network
    environment:
      # Same environment variables as the API service, as they share config
      - MONGO_DETAILS=mongodb://mongo:27017
      - DB_NAME=case_management_db_docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_NAME=kyc_events_docker
      - KAFKA_CONSUMER_GROUP_ID=case_management_group_docker
      - LOG_LEVEL=INFO
      - SERVICE_NAME_CONSUMER=case-consumer-docker
      # - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
      # - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317
    volumes:
      - ./case_management_service:/usr/src/app/case_management_service # For potential code changes if not running from pre-built image for dev

volumes:
  mongo_data: # Defines the named volume for MongoDB persistence

networks:
  case_management_network:
    driver: bridge
