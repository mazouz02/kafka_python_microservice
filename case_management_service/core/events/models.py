# Pydantic models for Domain Events
from pydantic import BaseModel, Field
from typing import List, Optional # Keep Dict, Any if BaseEvent payload can be dict for some internal events
# For domain events, payload should be strictly typed Pydantic models.
import datetime
import uuid

# Re-importing PersonData from its new location for use in event payloads if needed
from case_management_service.infrastructure.kafka.schemas import PersonData, AddressData # AddressData for CompanyProfileEventPayload

class EventMetaData(BaseModel):
    correlation_id: Optional[str] = None
    causation_id: Optional[str] = None

class BaseEvent(BaseModel):
    event_id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    event_type: str
    aggregate_id: str
    timestamp: datetime.datetime = Field(default_factory=datetime.datetime.utcnow)
    version: int = 1
    payload: BaseModel # Payload is a Pydantic model for type safety
    metadata: EventMetaData = Field(default_factory=EventMetaData)
    payload_model_name: Optional[str] = None # Hint for deserialization

# --- Existing Event Payloads - Modifications ---
class CaseCreatedEventPayload(BaseModel):
    client_id: str
    case_type: str # Corresponds to 'type' from KafkaMessage/CreateCaseCommand
    case_version: str # Corresponds to 'version'
    traitement_type: str # New: "KYC" or "KYB"
    # Optional: Link to a company if a company was created as part of this case context
    company_id: Optional[str] = None

# --- New Domain Event Payloads & Events ---

# Company Profile Events
class CompanyProfileEventPayloadStructure(BaseModel): # Define structure once
    registered_name: str
    trading_name: Optional[str] = None
    registration_number: str
    registration_date: Optional[str] = None
    country_of_incorporation: str
    registered_address: AddressData # Re-use AddressData from kafka.schemas
    business_type: Optional[str] = None
    industry_sector: Optional[str] = None
    # client_id: Optional[str] = None # If company can be linked to a client context separate from case

class CompanyProfileCreatedEventPayload(CompanyProfileEventPayloadStructure):
    # Inherits all fields from CompanyProfileEventPayloadStructure
    # Add any fields specific to creation, if any. For now, it's the same.
    # Company ID is the aggregate_id of the event itself.
    pass

class CompanyProfileCreatedEvent(BaseEvent):
    event_type: str = "CompanyProfileCreated"
    payload: CompanyProfileCreatedEventPayload
    payload_model_name: str = "CompanyProfileCreatedEventPayload"
    # aggregate_id for this event will be the company_id

# Beneficial Owner Events
class BeneficialOwnerEventPayloadStructure(BaseModel): # Define structure once
    # company_id: str # The company this BO belongs to (will be aggregate_id of the event)
    person_details: PersonData # Using PersonData from kafka.schemas (includes role)
    ownership_percentage: Optional[float] = None
    types_of_control: Optional[List[str]] = Field(default_factory=list)
    is_ubo: bool = False

class BeneficialOwnerAddedEventPayload(BeneficialOwnerEventPayloadStructure):
    beneficial_owner_id: str # Unique ID for this BO record/link, generated by command handler
    # company_id is the aggregate_id of the event

class BeneficialOwnerAddedEvent(BaseEvent):
    event_type: str = "BeneficialOwnerAdded"
    payload: BeneficialOwnerAddedEventPayload
    payload_model_name: str = "BeneficialOwnerAddedEventPayload"
    # aggregate_id for this event will be the company_id it's linked to.

# Person Event Modifications/Additions
# Modify PersonAddedToCaseEventPayload to include role, or create a new linking event.
# For KYB, a person is often linked to a company within a case.
# Let's assume PersonAddedToCaseEvent is about a person being the main subject of a KYC case.
# For KYB, persons are often related parties to the company.

class PersonAddedToCaseEventPayload(BaseModel): # Existing, ensure it's up-to-date
    person_id: str
    firstname: str
    lastname: str
    birthdate: Optional[str]
    # If this event is ONLY for KYC cases where person is the subject:
    # role_in_company: Optional[str] = None # This might not belong here.

# New event for linking person to company with a role (more explicit for KYB)
class PersonLinkedToCompanyEventPayload(BaseModel):
    # company_id is the aggregate_id of this event
    person_id: str # ID of the person (could be an existing person or one created now)
    # Person details might be included if this event can also create the person record
    firstname: str # Denormalized for context, or assume person_id implies existing person
    lastname: str
    birthdate: Optional[str] # Denormalized
    role_in_company: str # e.g., Director, Shareholder (UBO is a type of BO)

class PersonLinkedToCompanyEvent(BaseEvent):
    event_type: str = "PersonLinkedToCompany"
    payload: PersonLinkedToCompanyEventPayload
    payload_model_name: str = "PersonLinkedToCompanyEventPayload"
    # aggregate_id for this event will be the company_id.

# --- Existing Events - Ensure they use the updated BaseEvent and payloads ---
class CaseCreatedEvent(BaseEvent): # Existing, ensure payload is CaseCreatedEventPayload
    event_type: str = "CaseCreated" # Explicitly set event_type
    payload: CaseCreatedEventPayload # Payload type hint updated
    payload_model_name: str = "CaseCreatedEventPayload"

class PersonAddedToCaseEvent(BaseEvent): # Existing
    event_type: str = "PersonAddedToCase" # Explicitly set event_type
    payload: PersonAddedToCaseEventPayload # Payload type hint updated
    payload_model_name: str = "PersonAddedToCaseEventPayload"
