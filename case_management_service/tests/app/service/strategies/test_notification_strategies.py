# Unit tests for notification strategies
import pytest
from unittest.mock import AsyncMock, MagicMock
from typing import List, Optional, Dict, Any
from motor.motor_asyncio import AsyncIOMotorDatabase # For type hint matching

from case_management_service.app.service.commands.models import CreateCaseCommand, PersonData, CompanyProfileData, BeneficialOwnerData
from case_management_service.app.service.events import models as domain_event_models
from case_management_service.app.service.interfaces.notification_config_client import AbstractNotificationConfigClient, NotificationRule
from case_management_service.app.service.strategies.notification_strategies import (
    StandardNotificationStrategy,
    NoNotificationStrategy,
    get_notification_strategy,
)

# Helper to create a mock CreateCaseCommand
def create_mock_notification_command(
    traitement_type: str = "KYC",
    case_type: str = "STANDARD_DUE_DILIGENCE",
    persons: Optional[List[PersonData]] = None,
    company_profile: Optional[CompanyProfileData] = None, # Added for completeness
    beneficial_owners: Optional[List[BeneficialOwnerData]] = None # Added for completeness
) -> CreateCaseCommand:
    if persons is None:
        persons = [PersonData(firstname="John", lastname="Doe", birthdate="1990-01-01", role_in_company=None if traitement_type=="KYC" else "Director")]

    return CreateCaseCommand(
        client_id="client123",
        case_type=case_type,
        case_version="1.0", # Assuming a default
        traitement_type=traitement_type,
        persons=persons,
        company_profile=company_profile,
        beneficial_owners=beneficial_owners,
        # command_id and timestamp will be auto-generated by Pydantic default_factory
    )

@pytest.mark.asyncio
async def test_standard_notification_strategy_active_rule():
    mock_config_client = AsyncMock(spec=AbstractNotificationConfigClient)
    mock_db = AsyncMock(spec=AsyncIOMotorDatabase) # Mocked DB, though not used by this strategy version

    active_rule = NotificationRule(
        rule_id="rule1",
        is_active=True,
        notification_type="EMAIL_CASE_CREATED",
        template_id="template_case_created_v1",
        language_code="en-US"
    )
    mock_config_client.get_config.return_value = active_rule

    strategy = StandardNotificationStrategy()
    command = create_mock_notification_command(traitement_type="KYC", case_type="STANDARD")
    case_id = "case_test_123"

    payload = await strategy.prepare_notification(
        command=command,
        case_id=case_id,
        config_client=mock_config_client,
        db=mock_db
    )

    assert payload is not None
    assert payload.notification_type == "EMAIL_CASE_CREATED"
    assert payload.template_id == "template_case_created_v1"
    assert payload.language_code == "en-US"
    assert payload.recipient_details["case_id"] == case_id
    assert payload.recipient_details["client_id"] == command.client_id
    assert payload.context_data["case_type"] == command.case_type

    expected_trigger = f"CASE_CREATED_{command.traitement_type}_{command.case_type}".upper()
    expected_context = {
        "case_id": case_id,
        "client_id": command.client_id,
        "traitement_type": command.traitement_type,
        "case_type": command.case_type,
    }
    mock_config_client.get_config.assert_called_once_with(expected_trigger, expected_context)

@pytest.mark.asyncio
async def test_standard_notification_strategy_inactive_rule():
    mock_config_client = AsyncMock(spec=AbstractNotificationConfigClient)
    mock_db = AsyncMock(spec=AsyncIOMotorDatabase)

    inactive_rule = NotificationRule(
        rule_id="rule2",
        is_active=False, # Inactive
        notification_type="EMAIL_CASE_CREATED",
        template_id="template_case_created_v1",
        language_code="en-US"
    )
    mock_config_client.get_config.return_value = inactive_rule

    strategy = StandardNotificationStrategy()
    command = create_mock_notification_command()
    case_id = "case_test_456"

    payload = await strategy.prepare_notification(command, case_id, mock_config_client, mock_db)

    assert payload is None
    mock_config_client.get_config.assert_called_once()

@pytest.mark.asyncio
async def test_standard_notification_strategy_no_rule_found():
    mock_config_client = AsyncMock(spec=AbstractNotificationConfigClient)
    mock_db = AsyncMock(spec=AsyncIOMotorDatabase)

    mock_config_client.get_config.return_value = None # No rule found

    strategy = StandardNotificationStrategy()
    command = create_mock_notification_command()
    case_id = "case_test_789"

    payload = await strategy.prepare_notification(command, case_id, mock_config_client, mock_db)

    assert payload is None
    mock_config_client.get_config.assert_called_once()

@pytest.mark.asyncio
async def test_no_notification_strategy():
    mock_config_client = AsyncMock(spec=AbstractNotificationConfigClient) # Not used by this strategy
    mock_db = AsyncMock(spec=AsyncIOMotorDatabase) # Not used by this strategy

    strategy = NoNotificationStrategy()
    command = create_mock_notification_command()
    case_id = "case_test_000"

    payload = await strategy.prepare_notification(command, case_id, mock_config_client, mock_db)

    assert payload is None
    mock_config_client.get_config.assert_not_called() # Ensure it doesn't try to get config

@pytest.mark.asyncio
async def test_get_notification_strategy_factory_default():
    # Currently, the factory always returns StandardNotificationStrategy
    command = create_mock_notification_command()
    strategy = get_notification_strategy(command)
    assert isinstance(strategy, StandardNotificationStrategy)

# Example for a future test if factory logic becomes more complex:
# @pytest.mark.asyncio
# async def test_get_notification_strategy_factory_specific_case():
#     command = create_mock_notification_command(case_type="INTERNAL_TEST_CASE_NO_NOTIFICATIONS")
#     strategy = get_notification_strategy(command)
#     assert isinstance(strategy, NoNotificationStrategy)
